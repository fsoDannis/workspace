package com.example.findit_3;

import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.HashMap;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.example.findit_3.Second_Activity.QuoteRequest;
import com.example.findit_3.R;
import com.example.findit_3.Main;
//import com.dannis.findit.favDisplay;
//import com.dannis.findit.placesDisplay;
//import com.dannis.findit.searchForm;
//import com.dannis.findit.MainActivity.QuoteRequest;
import com.example.lib.fileStuff;
import com.example.lib.webStuff;

import android.os.AsyncTask;
import android.os.Bundle;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import android.view.View.OnClickListener;



public class Second_Activity extends Activity{

	Context _context;
//	LinearLayout _appLayout;
	EditText et;
	TextView _name;
	TextView _address;
	TextView _phone;
	TextView _distance;
	
	//searchForm et;
	//placesDisplay _places;
	//favDisplay _favorites;
	boolean connected = false;
	HashMap<String, String> _history;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.second);
		
		TextView tv = (TextView) findViewById(R.id.textView1);
		tv.setText(getIntent().getExtras().getString("Entered Text"));
		
		final Button searchButton = (Button) findViewById(R.id.button1);
		final EditText et = (EditText) findViewById(R.id.editText1);
		final TextView _name = (TextView) findViewById(R.id._name);
		final TextView _address = (TextView) findViewById(R.id._address);
		final TextView _phone = (TextView) findViewById(R.id._phone);
		final TextView _distance = (TextView) findViewById(R.id._distance);
	
	searchButton.setOnClickListener(new OnClickListener() {
		
		@Override
		public void onClick(View v) {
			// TODO Auto-generated method stub
			Log.i("USER TYPED:",et.getText().toString());
			getPlace(et.getText().toString());
		}
	});
	
	////////////////////////APP WORKS UP TO THIS POINT /////////////////////
	



	////////////////END OF THE ATTEMPT TO MAKE WORK CODE///////////////////
	}
//};
/////////////////////
@Override
public boolean onCreateOptionsMenu(Menu menu) {
	// Inflate the menu; this adds items to the action bar if it is present.
	getMenuInflater().inflate(R.menu.activity_main, menu);
	return true;
}
	  
private void getPlace(String place){
	Log.i("Click", place);
	//This Link gets you to the base link to the api service
	String baseURl = "http://query.yahooapis.com/v1/public/yql";
	String yql = "select * from local.search where zip='45103' and query='"+ place + "'";
	String qs;
	try{
		qs =URLEncoder.encode(yql,"UTF-8");
	}catch (Exception e){
		Log.e("Bad URL","ENCODING PROBLEM");
		qs="";
	}
	URL finalURL;
	try{
		finalURL = new URL(baseURl +"?q="+ qs + "&format=json&diagnostics=true&env=store://datatables.org/alltableswithkeys");
		QuoteRequest qr=new QuoteRequest();
		qr.execute(finalURL);
	}catch (MalformedURLException e){
		Log.e("BAD URL","MALFORMED URL");
		finalURL =null;
	}
}
@SuppressWarnings("unchecked")
private HashMap<String,String> getHistory(){
	Object stored = fileStuff.readObjectFile(_context, "history", false);
	
	HashMap<String, String> history;
	if(stored == null){
		Log.i("HISTORY","No History file found");
		history = new HashMap<String, String>();
	}else{
		history = (HashMap<String, String>) stored;
	}
	return history;
}


public class QuoteRequest extends AsyncTask<URL, Void, String>{
	@Override
	protected String doInBackground(URL... urls){
		String response ="";
		for(URL url: urls){
			response = webStuff.getURLStringResponse(url);
		}
		return response;
	}
	@Override
	protected void onPostExecute(String result){
		Log.i("URL RESPONSE", result);
		try{
			JSONObject json = new JSONObject(result);
			JSONObject query = json.getJSONObject("query");
			JSONObject results = query.getJSONObject("results");
			JSONArray ja = results.getJSONArray("Result");
			
			String queryCount= query.getString("count");
			String title = ja.getJSONObject(0).getString("Title");
			String address = ja.getJSONObject(0).getString("Address");
			String phone = ja.getJSONObject(0).getString("Phone");
			String distance = ja.getJSONObject(0).getString("Distance");
			
			/*//THIS LITTLE TOAST GUY HATES ME CANNOT GET THE "NOT" PART WORKING
			if(queryCount.length()== 0){
				Toast toast= Toast.makeText(_context,"Invalid Entry", Toast.LENGTH_SHORT);
				toast.show();
			}else{
				Toast toast= Toast.makeText(_context,"Valid Entry: " + title, Toast.LENGTH_SHORT);
				toast.show();
				//Writing to the hardDrive
				_history.put(ja.getJSONObject(0).getString("Title"), ja.getJSONObject(0).toString());
				fileStuff.storeObjectFile(_context, "history", _history, false);
				fileStuff.storeStringFile(_context, "temp", ja.getJSONObject(0).toString(), true);
				_name.setText(title);	
				_address.setText(address);	
				_phone.setText(phone);	
				_distance.setText(distance + " Miles Away");
			}*/
	
			Log.i("JSON RESULTS","Name:" + title.toString()+" Address:" + address.toString()+" Phone:"+ phone.toString());
		}catch (JSONException e){
			Log.e("JSON","JSON OBJECT EXCEPTION");
		}

	}
}
}



//		_context = this;
//		_appLayout = new LinearLayout(this);
//		_history = getHistory();
//		Log.i("HISTORY READ", _history.toString());
		
		//CREATING THE SEARCH BAR & BUTTON
//		 et = new searchForm(_context, "Enter a Place...","Find it!");
		
		//ADDING SEARCH HANDLER

		//Button searchButton = et.getButton();
		
		//GRABBING TEXT WHEN USER TYPES
//	    searchButton.setOnClickListener(new OnClickListener() {
	
//		@Override
//			public void onClick(View v) {
//				// TODO Auto-generated method stub
//				Log.i("USER TYPED:",et.getText().toString());
//				getPlace(et.getText().toString());
				
//			}
//	});
		
	//DETECT NETWORK CONNECTION
/*		connected = webStuff.getConnectionStatus(_context);
		if(connected){
			Log.i("NETWORK CONNECTION", webStuff.getConnectionType(_context));
		}*/
		
		//ADD PLACES DISPLAY
	//	_places = new placesDisplay(_context);
		
		//ADDING FAVORITES DISPLAY
	//	_favorites = new favDisplay(_context);
		
		//ADDING VIEWS TO THE MAIN LAYOUT
//		_appLayout.addView(et);
//		_appLayout.addView(_places);
		//Not showing the Display atm
		//_appLayout.addView(_favorites);

		
//		_appLayout.setOrientation(LinearLayout.VERTICAL);
		
		
//		setContentView(_appLayout);
/*	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.activity_main, menu);
		return true;
	}
    	  
	private void getPlace(String place){
		Log.i("Click", place);
		//This Link gets you to the base link to the api service
		String baseURl = "http://query.yahooapis.com/v1/public/yql";
		String yql = "select * from local.search where zip='45103' and query='"+ place + "'";
		String qs;
		try{
			qs =URLEncoder.encode(yql,"UTF-8");
		}catch (Exception e){
			Log.e("Bad URL","ENCODING PROBLEM");
			qs="";
		}
		URL finalURL;
		try{
			finalURL = new URL(baseURl +"?q="+ qs + "&format=json&diagnostics=true&env=store://datatables.org/alltableswithkeys");
			QuoteRequest qr=new QuoteRequest();
			qr.execute(finalURL);
		}catch (MalformedURLException e){
			Log.e("BAD URL","MALFORMED URL");
			finalURL =null;
		}
	}
	@SuppressWarnings("unchecked")
	private HashMap<String,String> getHistory(){
		Object stored = fileStuff.readObjectFile(_context, "history", false);
		
		HashMap<String, String> history;
		if(stored == null){
			Log.i("HISTORY","No History file found");
			history = new HashMap<String, String>();
		}else{
			history = (HashMap<String, String>) stored;
		}
		return history;
	}*/
	
	
	/*private class QuoteRequest extends AsyncTask<URL, Void, String>{
		@Override
		protected String doInBackground(URL... urls){
			String response ="";
			for(URL url: urls){
				response = webStuff.getURLStringResponse(url);
			}
			return response;
		}
		@Override
		protected void onPostExecute(String result){
			Log.i("URL RESPONSE", result);
			try{
				JSONObject json = new JSONObject(result);
				JSONObject query = json.getJSONObject("query");
				JSONObject results = query.getJSONObject("results");
				JSONArray ja = results.getJSONArray("Result");
				
				String queryCount= query.getString("count");
				String title = ja.getJSONObject(0).getString("Title");
				String address = ja.getJSONObject(0).getString("Address");
				String phone = ja.getJSONObject(0).getString("Phone");
				String distance = ja.getJSONObject(0).getString("Distance");
				
				//THIS LITTLE TOAST GUY HATES ME CANNOT GET THE "NOT" PART WORKING
				if(queryCount.length()== 0){
					Toast toast= Toast.makeText(_context,"Invalid Entry", Toast.LENGTH_SHORT);
					toast.show();
				}else{
					Toast toast= Toast.makeText(_context,"Valid Entry: " + title, Toast.LENGTH_SHORT);
					toast.show();
					//Writing to the hardDrive
					_history.put(ja.getJSONObject(0).getString("Title"), ja.getJSONObject(0).toString());
					fileStuff.storeObjectFile(_context, "history", _history, false);
					fileStuff.storeStringFile(_context, "temp", ja.getJSONObject(0).toString(), true);
				//	_places._title.setText(title);	
				//	_places._address.setText(address);	
				//	_places._phone.setText(phone);	
				//	_places._distance.setText(distance + " Miles Away");
				}
		
				Log.i("JSON RESULTS","Name:" + title.toString()+" Address:" + address.toString()+" Phone:"+ phone.toString());
			}catch (JSONException e){
				Log.e("JSON","JSON OBJECT EXCEPTION");
			}
	
		}
	}

}*/